/*
    Idea:
        Let representation be a * (b_1, b_2, ..., b_m) = N
        The only possible value of m is 2 or 3.
        
        When m = 3, a can only be 3
        When m = 2, a can be 3, 6, 9, ..., 48
            for a > 9, precompute
*/

#include <bits/stdc++.h>
using namespace std;

vector<vector<long long>> precomp = {
{24,10,389657},
{27,10,346598},
{27,10,354869},
{27,10,354968},
{18,20,539746},
{12,30,489576},
{12,30,598746},
{12,30,798456},
{18,30,495762},
{27,30,156948},
{12,40,659378},
{18,40,523976},
{18,240,53976},
{12,304,75896},
{12,403,75896},
{18,205,39746},
{18,502,39746},
{18,520,39746},
{18,405,23976},
{21,450,38697},
{18,504,23976},
{18,540,23976},
{18,2405,3976},
{18,5024,3976},
{18,5240,3976},
{12,60,798453},
{27,160,35984},
{18,260,53974},
{12,306,78459},
{12,306,79845},
{12,360,74598},
{27,360,15984},
{24,360,15798},
{12,603,78459},
{12,603,79845},
{12,630,78594},
{39,2064,1875},
{12,4306,7859},
{12,6043,7859},
{18,2605,3974},
{18,5026,3974},
{18,5260,3974},
{27,35064,189},
{12,70,436598},
{12,70,659438},
{36,107,25489},
{39,207,16485},
{18,270,53964},
{12,307,58496},
{12,703,58496},
{45,2073,1698},
{18,2307,4965},
{18,2705,3964},
{18,5027,3964},
{18,5270,3964},
{12,760,48953},
{18,2067,4953},
{12,3076,4895},
{12,7603,4895},
{18,26307,495},
{12,7460,3598},
{18,43607,295},
{18,25076,394},
{18,25076,439},
{18,50746,392},
{39,247056,18},
{24,180,39657},
{15,308,26479},
{15,308,62479},
{24,380,15769},
{15,2308,6479},
{15,3082,6479},
{27,1508,3649},
{27,3508,1964},
{15,3086,2479},
{12,3608,4759},
{15,6308,2479},
{12,8036,4759},
{15,23086,479},
{15,26308,479},
{15,30826,479},
{15,30862,479},
{15,62308,479},
{15,63082,479},
{12,30846,579},
{12,36048,759},
{12,43086,579},
{12,48036,759},
{27,36508,149},
{24,38065,197},
{12,40586,793},
{12,58604,793},
{12,60854,793},
{12,305846,79},
{27,358460,19},
{12,430586,79},
{12,530846,79},
{12,543086,79},
{12,584603,79},
{12,586043,79},
{12,608543,79},
{12,3780,6594},
{12,7480,3596},
{39,20748,165},
{12,30784,596},
{12,34078,596},
{12,78034,596},
{12,78403,596},
{24,15078,396},
{36,15870,249},
{24,30758,169},
{36,250487,19},
{36,254807,19},
{36,254870,19},
{12,6078,3459},
{12,7806,3459},
{12,78630,594},
{12,47608,359},
{12,48076,359},
{12,76048,359},
{12,80476,359},
{12,307846,59},
{12,346078,59},
{12,430786,59},
{12,780346,59},
{12,784603,59},
{12,786043,59},
{12,58607,493},
{12,60857,493},
{12,70586,493},
{39,205687,14},
{39,1675408,2},
{39,2056784,1},
{39,2065748,1},
{27,190,35846},
{36,190,25487},
{12,309,45768},
{12,309,57846},
{36,2490,1587},
{12,4309,5786},
{18,509,47263},
{12,3059,7846},
{12,5309,7846},
{12,5903,7846},
{12,5940,7863},
{12,43059,786},
{12,45309,768},
{12,54309,786},
{12,59043,786},
{12,609,78543},
{12,3096,5784},
{18,20639,547},
{12,6094,3758},
{12,6094,7538},
{12,30964,785},
{18,34096,275},
{18,39064,527},
{18,39640,527},
{18,40639,527},
{12,6095,7438},
{24,16059,378},
{12,30596,784},
{12,35960,748},
{12,53096,784},
{12,59603,784},
{18,329065,47},
{18,520639,47},
{12,65940,378},
{12,340596,78},
{12,345906,78},
{12,346059,78},
{18,396405,27},
{18,503964,27},
{18,539064,27},
{18,539640,27},
{18,540639,27},
{12,590346,78},
{12,596034,78},
{12,603459,78},
{12,3079,5846},
{15,3079,2486},
{15,3079,2648},
{15,3079,4826},
{15,3079,4862},
{15,3079,6248},
{15,3079,6482},
{12,7903,5846},
{45,20937,186},
{15,23079,486},
{15,23079,648},
{18,27309,465},
{18,39740,526},
{12,40793,586},
{12,43079,586},
{12,49307,586},
{12,70493,586},
{12,79043,586},
{12,79304,586},
{18,509724,36},
{18,397405,26},
{18,503974,26},
{18,539740,26},
{12,7609,3548},
{18,29706,534},
{18,39760,524},
{15,63079,248},
{15,63079,482},
{18,239760,54},
{15,263079,48},
{18,276309,45},
{15,623079,48},
{12,47609,358},
{18,397460,52},
{18,470639,52},
{18,2039746,5},
{18,2307649,5},
{18,2340976,5},
{18,2397604,5},
{18,2403976,5},
{18,2603974,5},
{18,2674309,5},
{18,2703964,5},
{18,3420769,5},
{18,3420796,5},
{18,3620749,5},
{18,3964027,5},
{18,3974026,5},
{18,3974602,5},
{18,3976024,5},
{18,4023976,5},
{18,4063792,5},
{18,4079362,5},
{18,4230769,5},
{18,4230796,5},
{18,4623097,5},
{18,4792063,5},
{18,50967,324},
{24,157690,38},
{24,169057,38},
{24,190567,38},
{24,190765,38},
{24,196057,38},
{18,529706,34},
{12,357609,48},
{12,359076,48},
{12,360759,48},
{24,396570,18},
{18,397605,24},
{18,503976,24},
{18,539760,24},
{12,759036,48},
{12,760359,48},
{48,1069735,2},
{48,1635709,2},
{48,1739065,2},
{18,2397605,4},
{18,3260795,4},
{18,5023976,4},
{18,5239760,4},
{18,460795,32},
{18,507946,32},
{12,756094,38},
{18,4952067,3},
{18,4957620,3},
{18,4962057,3},
{18,5072649,3},
{18,5094627,3},
{12,3547609,8},
{12,3590476,8},
{12,3604759,8},
{12,3756094,8},
{18,3974605,2},
{18,4560973,2},
{18,4605973,2},
{18,4736095,2},
{12,4759036,8},
{12,4760359,8},
{18,5039746,2},
{18,5094736,2},
{18,5397460,2},
{18,5470639,2},
{12,6093754,8},
{12,7093645,8},
{12,3089,4576},
{27,19804,356},
{12,8095,4736},
{12,35908,476},
{12,35980,746},
{12,80359,476},
{36,105849,27},
{27,140895,36},
{27,159840,36},
{36,180594,27},
{36,208594,17},
{12,304895,76},
{12,359048,76},
{27,359840,16},
{12,453089,76},
{12,480359,76},
{12,489503,76},
{12,489530,76},
{12,60938,745},
{12,60938,754},
{12,308496,57},
{12,493086,57},
{12,809365,47},
{12,408596,73},
{12,409586,73},
{12,495086,73},
{27,1569480,3},
{27,1594806,3},
{12,3058496,7},
{27,3465980,1},
{27,3548690,1},
{27,3549680,1},
{27,3640895,1},
{12,4365980,7},
{12,4930586,7},
{12,5308496,7},
{12,5493086,7},
{12,5849603,7},
{12,5860493,7},
{12,5940863,7},
{12,6085493,7},
{12,6594380,7},
{12,8094635,7},
{12,7809,5346},
{12,8097,4365},
{24,30897,165},
{15,47908,263},
{15,47908,623},
{15,247908,63},
{36,249087,15},
{15,479082,63},
{15,308479,26},
{15,308479,62},
{12,409378,65},
{15,479083,26},
{15,479083,62},
{15,483079,26},
{15,483079,62},
{15,2308479,6},
{15,2479083,6},
{15,2483079,6},
{15,3082479,6},
{15,4790823,6},
{15,4823079,6},
{12,57809,346},
{12,59078,346},
{12,78059,346},
{24,157980,36},
{24,385709,16},
{12,475908,36},
{12,480759,36},
{12,745980,36},
{12,759048,36},
{12,785940,63},
{12,804759,36},
{36,1708594,2},
{36,2058497,1},
{36,2059748,1},
{36,2087495,1},
{36,2540978,1},
{12,3078459,6},
{12,3079845,6},
{12,3459078,6},
{12,4098753,6},
{12,4307859,6},
{12,7084953,6},
{12,7803459,6},
{12,7845903,6},
{12,7859043,6},
{12,7984503,6},
{12,7984530,6},
{12,76809,453},
{12,78096,534},
{21,386970,45},
{12,793086,54},
{12,809736,45},
{45,1698073,2},
{45,1698307,2},
{45,1706983,2},
{45,1860937,2},
{15,479086,23},
{15,647908,23},
{12,746098,35},
{12,780964,35},
{15,2479086,3},
{15,2647908,3},
{15,4790826,3},
{15,4790862,3},
{15,6247908,3},
{15,6479082,3},
{15,3086479,2},
{12,3098746,5},
{15,4790863,2},
{15,4863079,2},
{15,6308479,2},
{15,6479083,2},
{15,6483079,2},
{12,7863094,5},
{12,578096,34},
{12,586079,43},
{12,590786,43},
{12,596078,34},
{12,607859,43},
{12,608579,43},
{12,780596,34},
{12,785609,43},
{12,785906,43},
{12,786059,43},
{12,790586,43},
{24,1507896,3},
{24,1605879,3},
{24,1607985,3},
{24,1706589,3},
{24,3065879,1},
{12,3075896,4},
{24,3078965,1},
{21,3587096,4},
{24,3780659,1},
{24,3896570,1},
{12,5793086,4},
{12,5860793,4},
{12,6085793,4},
{12,6093758,4},
{12,6593780,4},
{12,7560938,4},
{12,7589603,4},
{12,7809635,4},
{12,7930586,4},
{12,4075896,3},
{12,4098756,3},
{21,4509768,3},
{12,4576809,3},
{12,4895076,3},
{12,4895760,3},
{12,5846079,3},
{12,5849607,3},
{12,5874096,3},
{12,5907846,3},
{12,5960784,3},
{12,5987460,3},
{12,6078459,3},
{12,6079845,3},
{12,6587094,3},
{12,7058496,3},
{12,7084956,3},
{12,7450896,3},
{12,7589604,3},
{12,7604895,3},
{12,7840596,3},
{12,7845906,3},
{12,7846059,3},
{12,7905846,3},
{12,7984506,3},
{12,7984560,3},
};

bool compare(vector<long long> &u, vector<long long> &v) {
    if (u.size() != v.size()) return u.size() < v.size();
    return u < v;
}

long long parseToInt(char s[], int n) {
    long long ret = 0;
    for (int i=0; i<n; i++) {
        ret = (ret << 3) + (ret << 1);
        ret += s[i] - '0';
    }
    
    return ret;
}

map<long long, vector<long long>> ans;

void add(long long x, vector<long long> &y) {
    if (ans.find(x) == ans.end() || compare(y, ans[x]))
        ans[x] = y;
}

void h(vector<long long> v) {
    
    sort(v.begin() + 1, v.end());
    do {
        long long ten, tmp, res = 0;
        
        for (int i=1; i<v.size(); i++) {
            tmp = v[0] * v[i];
            ten = 1;
            while (tmp >= ten) ten *= 10;
            res = res * ten + tmp;
        }
        
        add(res, v);
 
    } while (next_permutation(v.begin() + 1, v.end()));
}

vector<long long> v;
int cnt; int res[30];
void g() {
            
    int n = 0; long long tmp;
    for (int i=1; i<v.size(); i++) {
        
        tmp = v[0] * v[i];
        while (tmp) res[n++] = tmp % 10, tmp /= 10;
        
    }
    
    if (n != 10) return;

    int bit = 0;
    while (n--) bit |= 1 << res[n];
    if (bit != 1023) return;
    
    h(v);

    ++cnt;
}

void f(char s[], int n, int k) {    
    if (k == 0) {
        do {
            if (s[0] == '0') continue;
            v.push_back(parseToInt(s, n));
            g();
            v.pop_back();
        } while (next_permutation(s, s + n));
        return;
    }
    
    char t[11], u[11];
    for (int i=0; i+1 < 1<< n-1; i++) {        
        int lent = 0, lenu = 0;
        
        t[lent++] = s[0];
        for (int j=0; j+1<n; j++) 
            if (i >> j & 1) 
                t[lent++] = s[j+1];
            else
                u[lenu++] = s[j+1];
            
        do {
            if (t[0] == '0') continue;
            v.push_back(parseToInt(t, lent));
            f(u, lenu, k-1);
            v.pop_back();
        } while (next_permutation(t, t + lent));
    }
    
}

int main() {
    clock_t start = clock();
    
    {
        char s[] = "012456789";
        v.push_back(3);
        f(s, 9, 2);
        v.pop_back();
    }
    
    
    {
        char s[] = "012456789";
        v.push_back(3);
        f(s, 9, 1);
        v.pop_back();
    }
    
    
    {
        char s[] = "012345789";
        v.push_back(6);
        f(s, 9, 1);
        v.pop_back();
    }
    
    
    {
        char s[] = "012345678";
        v.push_back(9);
        f(s, 9, 1);
        v.pop_back();
    }
    
    for (vector<long long> v: precomp)
        h(v);
    
    int t;
    scanf("%d", &t);
    long long num;
    
    while (t--) {
        scanf("%lld", &num);
        map<long long, vector<long long>>::iterator it = ans.upper_bound(num);
        --it;
        
        printf("%lld*(", it->second[0]);
        for (int i=1; i+1<it->second.size(); i++)
            printf("%lld,", it->second[i]);
        printf("%lld)=%lld\n", it->second.back(), it->first);
    }
    
    cerr << cnt << endl; cerr << ans.size() << endl;
    cerr << (double) (clock() - start) / CLOCKS_PER_SEC << endl;
    return 0;
}
