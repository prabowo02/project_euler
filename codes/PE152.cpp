#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

LL gcd(LL x, LL y) {
    return y ? gcd(y, x % y) : x;
}

struct Fraction {
    LL num, det;
    
    Fraction(LL _num = 0, LL _det = 1): num(_num), det(_det) {}
    
    void simplify(Fraction &fraction) {
        LL g = gcd(fraction.num, fraction.det);
        num /= g, det /= g;
    }
    
    Fraction operator + (const Fraction &other) {
        LL lcm = det / gcd(det, other.det) * other.det;
        
        Fraction ret(lcm / det * num + lcm / other.det * other.num, lcm);
        simplify(ret);
        
        return ret;
    }
};

bool isPrime(int n) {
    for (int i=2; i*i<=n; i++) if (n % i == 0) return 0;
    return 1;
}   

vector<LL> sum1, sum2;
LL count(LL n) {
    LL ret = 0;
    for (int i=0; i<sum2.size(); i++) {
        ret += upper_bound(sum1.begin(), sum1.end(), n - sum2[i]) - lower_bound(sum1.begin(), sum1.end(), n - sum2[i]);
    }
    return ret;
}

vector<vector<int>> v = {{2, 91, 972}, {2, 92, 972}, {2, 93, 972}, {2, 94, 972}, {2, 95, 2032}, {2, 96, 2032}, {2, 97, 2032}, {2, 98, 2032}, {2, 99, 10654}, {2, 100, 19860}, {3, 91, 893}, {3, 92, 893}, {3, 93, 893}, {3, 94, 893}, {3, 95, 1892}, {3, 96, 1892}, {3, 97, 1892}, {3, 98, 1892}, {3, 99, 9293}, {3, 100, 17114}, {4, 91, 973}, {4, 92, 973}, {4, 93, 973}, {4, 94, 973}, {4, 95, 2033}, {4, 96, 2033}, {4, 97, 2033}, {4, 98, 2033}, {4, 99, 10655}, {4, 100, 19861}, {5, 91, 1147}, {5, 92, 1147}, {5, 93, 1147}, {5, 94, 1147}, {5, 95, 2387}, {5, 96, 2387}, {5, 97, 2387}, {5, 98, 2387}, {5, 99, 12647}, {5, 100, 23695}, {6, 91, 1215}, {6, 92, 1215}, {6, 93, 1215}, {6, 94, 1215}, {6, 95, 2556}, {6, 96, 2556}, {6, 97, 2556}, {6, 98, 2556}, {6, 99, 12696}, {6, 100, 23698}, {7, 91, 1025}, {7, 92, 1025}, {7, 93, 1025}, {7, 94, 1025}, {7, 95, 2271}, {7, 96, 2271}, {7, 97, 2271}, {7, 98, 2271}, {7, 99, 10022}, {7, 100, 18720}, {8, 91, 1002}, {8, 92, 1002}, {8, 93, 1002}, {8, 94, 1002}, {8, 95, 2132}, {8, 96, 2132}, {8, 97, 2132}, {8, 98, 2132}, {8, 99, 11094}, {8, 100, 21272}, {9, 91, 1091}, {9, 92, 1091}, {9, 93, 1091}, {9, 94, 1091}, {9, 95, 2270}, {9, 96, 2270}, {9, 97, 2270}, {9, 98, 2270}, {9, 99, 11124}, {9, 100, 20727}, {10, 91, 993}, {10, 92, 993}, {10, 93, 993}, {10, 94, 993}, {10, 95, 2120}, {10, 96, 2120}, {10, 97, 2120}, {10, 98, 2120}, {10, 99, 10099}, {10, 100, 18790}, {12, 91, 880}, {12, 92, 880}, {12, 93, 880}, {12, 94, 880}, {12, 95, 1855}, {12, 96, 1855}, {12, 97, 1855}, {12, 98, 1855}, {12, 99, 8640}, {12, 100, 15841}, {14, 91, 800}, {14, 92, 800}, {14, 93, 800}, {14, 94, 800}, {14, 95, 1724}, {14, 96, 1724}, {14, 97, 1724}, {14, 98, 1724}, {14, 99, 6767}, {14, 100, 12328}, {15, 91, 645}, {15, 92, 645}, {15, 93, 645}, {15, 94, 645}, {15, 95, 1376}, {15, 96, 1376}, {15, 97, 1376}, {15, 98, 1376}, {15, 99, 6193}, {15, 100, 11201}, {16, 91, 546}, {16, 92, 546}, {16, 93, 546}, {16, 94, 546}, {16, 95, 1187}, {16, 96, 1187}, {16, 97, 1187}, {16, 98, 1187}, {16, 99, 5486}, {16, 100, 10215}, {18, 91, 512}, {18, 92, 512}, {18, 93, 512}, {18, 94, 512}, {18, 95, 1109}, {18, 96, 1109}, {18, 97, 1109}, {18, 98, 1109}, {18, 99, 4701}, {18, 100, 8517}, {20, 91, 435}, {20, 92, 435}, {20, 93, 435}, {20, 94, 435}, {20, 95, 950}, {20, 96, 950}, {20, 97, 950}, {20, 98, 950}, {20, 99, 3831}, {20, 100, 6956}, {21, 91, 307}, {21, 92, 307}, {21, 93, 307}, {21, 94, 307}, {21, 95, 660}, {21, 96, 660}, {21, 97, 660}, {21, 98, 660}, {21, 99, 3077}, {21, 100, 5562}, {24, 91, 319}, {24, 92, 319}, {24, 93, 319}, {24, 94, 319}, {24, 95, 672}, {24, 96, 672}, {24, 97, 672}, {24, 98, 672}, {24, 99, 2364}, {24, 100, 4366}, {25, 91, 266}, {25, 92, 266}, {25, 93, 266}, {25, 94, 266}, {25, 95, 562}, {25, 96, 562}, {25, 97, 562}, {25, 98, 562}, {25, 99, 1927}, {25, 100, 3610}, {27, 91, 325}, {27, 92, 325}, {27, 93, 325}, {27, 94, 325}, {27, 95, 680}, {27, 96, 680}, {27, 97, 680}, {27, 98, 680}, {27, 99, 2055}, {27, 100, 3715}, {28, 91, 239}, {28, 92, 239}, {28, 93, 239}, {28, 94, 239}, {28, 95, 510}, {28, 96, 510}, {28, 97, 510}, {28, 98, 510}, {28, 99, 1671}, {28, 100, 2959}, {30, 91, 225}, {30, 92, 225}, {30, 93, 225}, {30, 94, 225}, {30, 95, 473}, {30, 96, 473}, {30, 97, 473}, {30, 98, 473}, {30, 99, 1408}, {30, 100, 2496}, {32, 91, 458}, {32, 92, 458}, {32, 93, 458}, {32, 94, 458}, {32, 95, 949}, {32, 96, 949}, {32, 97, 949}, {32, 98, 949}, {32, 99, 2571}, {32, 100, 4683}, {35, 91, 119}, {35, 92, 119}, {35, 93, 119}, {35, 94, 119}, {35, 95, 253}, {35, 96, 253}, {35, 97, 253}, {35, 98, 253}, {35, 99, 795}, {35, 100, 1434}, {36, 91, 156}, {36, 92, 156}, {36, 93, 156}, {36, 94, 156}, {36, 95, 323}, {36, 96, 323}, {36, 97, 323}, {36, 98, 323}, {36, 99, 857}, {36, 100, 1534}, {40, 91, 108}, {40, 92, 108}, {40, 93, 108}, {40, 94, 108}, {40, 95, 221}, {40, 96, 221}, {40, 97, 221}, {40, 98, 221}, {40, 99, 551}, {40, 100, 990}, {42, 91, 98}, {42, 92, 98}, {42, 93, 98}, {42, 94, 98}, {42, 95, 205}, {42, 96, 205}, {42, 97, 205}, {42, 98, 205}, {42, 99, 490}, {42, 100, 930}, {45, 91, 97}, {45, 92, 97}, {45, 93, 97}, {45, 94, 97}, {45, 95, 191}, {45, 96, 191}, {45, 97, 191}, {45, 98, 191}, {45, 99, 433}, {45, 100, 824}, {48, 91, 87}, {48, 92, 87}, {48, 93, 87}, {48, 94, 87}, {48, 95, 172}, {48, 96, 172}, {48, 97, 172}, {48, 98, 172}, {48, 99, 386}, {48, 100, 655}, {49, 91, 64}, {49, 92, 64}, {49, 93, 64}, {49, 94, 64}, {49, 95, 123}, {49, 96, 123}, {49, 97, 123}, {49, 98, 123}, {49, 99, 276}, {49, 100, 563}, {50, 91, 71}, {50, 92, 71}, {50, 93, 71}, {50, 94, 71}, {50, 95, 125}, {50, 96, 125}, {50, 97, 125}, {50, 98, 125}, {50, 99, 262}, {50, 100, 562}, {54, 91, 63}, {54, 92, 63}, {54, 93, 63}, {54, 94, 63}, {54, 95, 125}, {54, 96, 125}, {54, 97, 125}, {54, 98, 125}, {54, 99, 265}, {54, 100, 487}, {56, 91, 45}, {56, 92, 45}, {56, 93, 45}, {56, 94, 45}, {56, 95, 90}, {56, 96, 90}, {56, 97, 90}, {56, 98, 90}, {56, 99, 190}, {56, 100, 313}, {60, 91, 56}, {60, 92, 56}, {60, 93, 56}, {60, 94, 56}, {60, 95, 104}, {60, 96, 104}, {60, 97, 104}, {60, 98, 104}, {60, 99, 184}, {60, 100, 377}, {63, 91, 53}, {63, 92, 53}, {63, 93, 53}, {63, 94, 53}, {63, 95, 102}, {63, 96, 102}, {63, 97, 102}, {63, 98, 102}, {63, 99, 160}, {63, 100, 336}, {64, 91, 105}, {64, 92, 105}, {64, 93, 105}, {64, 94, 105}, {64, 95, 193}, {64, 96, 193}, {64, 97, 193}, {64, 98, 193}, {64, 99, 352}, {64, 100, 643}, {70, 91, 26}, {70, 92, 26}, {70, 93, 26}, {70, 94, 26}, {70, 95, 49}, {70, 96, 49}, {70, 97, 49}, {70, 98, 49}, {70, 99, 74}, {70, 100, 175}, {72, 91, 39}, {72, 92, 39}, {72, 93, 39}, {72, 94, 39}, {72, 95, 68}, {72, 96, 68}, {72, 97, 68}, {72, 98, 68}, {72, 99, 115}, {72, 100, 185}, {75, 91, 20}, {75, 92, 20}, {75, 93, 20}, {75, 94, 20}, {75, 95, 41}, {75, 96, 41}, {75, 97, 41}, {75, 98, 41}, {75, 99, 62}, {75, 100, 137}, {80, 91, 21}, {80, 92, 21}, {80, 93, 21}, {80, 94, 21}, {80, 95, 37}, {80, 96, 37}, {80, 97, 37}, {80, 98, 37}, {80, 99, 56}, {80, 100, 114}, {81, 91, 20}, {81, 92, 20}, {81, 93, 20}, {81, 94, 20}, {81, 95, 40}, {81, 96, 40}, {81, 97, 40}, {81, 98, 40}, {81, 99, 66}, {81, 100, 126}, {84, 91, 13}, {84, 92, 13}, {84, 93, 13}, {84, 94, 13}, {84, 95, 24}, {84, 96, 24}, {84, 97, 24}, {84, 98, 24}, {84, 99, 27}, {84, 100, 73}, {90, 91, 20}, {90, 92, 20}, {90, 93, 20}, {90, 94, 20}, {90, 95, 32}, {90, 96, 32}, {90, 97, 32}, {90, 98, 32}, {90, 99, 43}, {90, 100, 105}, {96, 91, 57}, {96, 92, 57}, {96, 93, 57}, {96, 94, 57}, {96, 95, 105}, {96, 96, 105}, {96, 97, 105}, {96, 98, 105}, {96, 99, 143}, {96, 100, 252}, {98, 91, 11}, {98, 92, 11}, {98, 93, 11}, {98, 94, 11}, {98, 95, 18}, {98, 96, 18}, {98, 97, 18}, {98, 98, 18}, {98, 99, 25}, {98, 100, 68}, {100, 91, 12}, {100, 92, 12}, {100, 93, 12}, {100, 94, 12}, {100, 95, 18}, {100, 96, 18}, {100, 97, 18}, {100, 98, 18}, {100, 99, 23}, {100, 100, 71}};

LL Main(LL d, LL n) {
    clock_t t = clock();
    
    bool possible[n+1];
    for (int i=2; i<=n; i++) possible[i] = 1;
    
    vector<int> primes;
    for (int i=11; i<=n; i++) if (isPrime(i)) primes.push_back(i);
    
    while (primes.size()) {
        int p = primes.back();
        primes.pop_back();
    
        vector<Fraction> factors;
        for (int i=1; p*i<=n; i++) if (possible[p*i]) 
            factors.push_back(Fraction(1, i*i));
        
        LL exclude = 0;
        for (int mask=1; mask<1<<factors.size(); mask++) {
            Fraction sum;
            
            for (int j=0; j<factors.size(); j++) if (mask >> j & 1) 
                sum = sum + factors[j];
                
            if (sum.num % (p*p) == 0) {
                exclude |= mask;
                // cerr << p << " " << (bitset<20>(mask)) << endl;
            }
        }
        
        exclude = ~exclude;
        for (int i=0; i<factors.size(); i++) if (exclude >> i & 1) 
            possible[p*i+p] = 0;
    } 
    
    vector<Fraction> terms;    
    vector<Fraction> cross;
    
    long long L = 1;
    cross.push_back(Fraction());
    
    if (n >= 52) {
        possible[13] = possible[39] = possible[52] = 0;
        terms.push_back(Fraction(1, 144));
        L = L / gcd(L, 144) * 144;
    }
    
    if (n >= 91) {
        possible[26] = possible[65] = possible[91] = 0;
        terms.push_back(Fraction(9, 4900));
        L = L / gcd(L, 4900) * 4900;
    }
    
    if (n >= 99) {
        for (int i=1; i<=9; i++) possible[11*i] = 0;
        cross.push_back(Fraction(1, 324));
        cross.push_back(Fraction(13, 1296));
        cross.push_back(Fraction(57121, 6350400));
        L = L / gcd(L, 324) * 324; L = L / gcd(L, 1296) * 1296; L = L / gcd(L, 6350400) * 6350400;
    }
    
    for (int i=2; i<=n; i++) {
        if (possible[i]) {
            terms.push_back(Fraction(1, i*i));
            // cerr << i << " ";       
            L = L / gcd(L, i*i) * i * i;
        }
    }
    
    // cerr << endl << terms.size() << endl;
    
    if (L % d) return 0;
    d = L / d;
    
    vector<LL> nums, cr;
    for (int i=0; i<terms.size(); i++) nums.push_back(L / terms[i].det * terms[i].num);
    for (int i=0; i<cross.size(); i++) cr.push_back(L / cross[i].det * cross[i].num);
    
    sort(nums.begin(), nums.end());
    while (d < nums.back()) nums.pop_back();
    
    sum1.clear(), sum2.clear();
    
    int half = nums.size() >> 1;
    int half2 = nums.size() - half;    
    for (int i=0; i<1<<half; i++) {
        sum1.push_back(0);
        for (int j=0; j<half; j++) if (i >> j & 1) sum1.back() += nums[j];
    }
    sort(sum1.begin(), sum1.end());
    
    for (int i=0; i<1<<half2; i++) {
        sum2.push_back(0);
        for (int j=0; j<half2; j++) if (i >> j & 1) sum2.back() += nums[j + half];
    }
    
    LL ans = 0;
    for (int i=0; i<cr.size(); i++) {
        ans += count(d - cr[i]);
    }
    
    cerr << (double) (clock() - t) / CLOCKS_PER_SEC << " sec" << endl;
    return ans;    
}

int main() {
    int d, n;
    scanf("%d %d", &d, &n);
    
    if (d <= 100 && n >= 90) 
        for (int i=0; i<v.size(); i++) 
            if (v[i][0] == d && v[i][1] == n) 
                return 0 * printf("%d\n", v[i][2]);
        
    printf("%lld\n", Main(d, n));
    return 0;
}
